name: toolchain

on:
  schedule:
    - cron: 0 17 * * 1
  repository_dispatch:
  workflow_dispatch:

env:
  DIY_P1_SH: sh/op.sh

jobs:
  build_firmware:
    name: 编译固件
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        repo_info:
          - {branch: "openwrt-23.05"}
          - {branch: "openwrt-24.10"}


    steps: 
    - name: 检查分支
      uses: actions/checkout@main


    - name: 编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y img2simg build-essential flex bison cmake g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-distutils python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        sudo timedatectl set-timezone 'Asia/Shanghai'
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -Th

    - name: 设置环境变量
      run: |
        TAG="$(date +'%Y%m%d')-$(openssl rand -hex 3)"
        echo "tag=$TAG" >> $GITHUB_ENV
        echo "REPO_URL=${{ matrix.repo_info.repo_url }}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${{ matrix.repo_info.branch }}" >> $GITHUB_ENV

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 切换分支
      working-directory: ./openwrt
      id: var
      run: |
        case $REPO_BRANCH in
          openwrt-24.10)
            _release_tag=$(git tag --sort=taggerdate --list 'v24.*' | tail -1)
            git checkout $_release_tag
            _prerelease=false
            ;;
          openwrt-23.05)
            _release_tag=$(git tag --sort=taggerdate --list 'v23.*' | tail -1)
            git checkout $_release_tag
            _prerelease=false
            ;;
          *)
            echo "Can't get local/upstream's branch/tags"
            ;;
        esac
        echo "release_tag=$_release_tag" >> $GITHUB_ENV 
           
 
    - name: 更新feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
               
    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        cat <<EOF >>openwrt/.config
        CONFIG_TARGET_ramips=y
        CONFIG_TARGET_ramips_mt7621=y
        CONFIG_TARGET_ramips_mt7621_DEVICE_xiaomi_mi-router-3g=y
        EOF
           
    
    - name: 下载编译依赖
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: 编译源码
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 清理缓存
      id: organize
      run: |
        cd openwrt
        make clean
 
    
    - name: 缓存 staging_dir
      uses: actions/cache@v4
      with:
        path: |
          openwrt/staging_dir
        key: ${{ matrix.repo_info.branch }}-toolchain-cache
        restore-keys: |
          ${{ matrix.repo_info.branch }}-toolchain-cache
